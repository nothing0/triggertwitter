{"name":"Twitter Command","tagline":"Set requirements for tweets and trigger your custom functions with the found tweets","body":"Twitter Command - An easy way to search tweets with PHP\r\n-------------------------------------------------------\r\n\r\nTwitter Command lets you search your timeline with specific parameters to find the kind of tweets you want. If a tweet is found, Twitter Command will trigger a function that you have created, so you can do everything you want with the found tweet.\r\n\r\nHow does it work?\r\n-----------------\r\n####It all starts with the config file:\r\n```PHP\r\n// config.php\r\n\r\n/* ===================================\r\n * Twitteroauth keys\r\n * ===================================\r\n */\r\ndefine('CONSUMER_KEY', \t\t\t'');\r\ndefine('CONSUMER_SECRET', \t\t'');\r\ndefine('OAUTH_TOKEN', \t\t\t'');\r\ndefine('OAUTH_TOKEN_SECRET',\t'');\r\n\r\n/* ===================================\r\n * Global\r\n * ===================================\r\n */\r\n// ROOT_PATH is the path to this location where all the twitter-command files are stored\r\ndefine('ROOT_PATH',\t\t\t\t'/path/to/webserver/myProject/twitter-command/');\r\n\r\n// PROJECT_PATH is the path to the project where twitter-command is used for, so that some files don't have to be in the ROOT_PATH\r\ndefine('PROJECT_PATH',\t\t\t'/path/to/webserver/myProject/');\r\n\r\n// The name of the actions file\r\ndefine('ACTIONS_FILE', \t\t\tROOT_PATH . 'actions.php');\r\n\r\n// ROOT_PATH can be changed to PROJECT_PATH if the actions directory isn't in the root directory\r\ndefine('ACTIONS_DIRECTORY',\t\tROOT_PATH . 'actions/'); \r\n```\r\nThis is the most basic setup of the config file. The ROOT_PATH means the path to twitter-command (can be within your project) and PROJECT_PATH means the path to your project.\r\n\r\n\r\n#### After that, we have actions.php:\r\n```PHP\r\n// actions.php\r\n\r\nreturn array(\r\n\t'tweet' => array(  \r\n\t\t'validation' => array(\r\n\t\t\t'text_equals' => array('Using twitter-command', 'twitter-command!') // The tweet must be equal to the given text\r\n\t\t),\r\n\t\t'do' => array('path' => ROOT_PATH . 'actions/TweetFound.php', 'class_name' => 'TweetFound', 'method_name' => 'twitterCommand'), \r\n\t\t'extra_params' => array('found_timestamp' => time()) \r\n\t),\r\n);\r\n```\r\nWhat happens above is that there is searched for a tweet with specific text. If the tweet if found, the method TweetFound::twitterCommand is being triggered in actions/TweetFound.php.\r\nThere are various methods to search with. In the example above, text_equals is used. These methods are available:\r\n* text_equals\r\n  * array('The text the tweet must have')\r\n* text_contains\r\n  * array('The text the tweet must contain')\r\n* hashtags\r\n  * array('hashtags')\r\n* mentions\r\n  * array('mentions')\r\n* screen_name\r\n  * array('screen_names')\r\n* retweet\r\n  * bool -> if true, the tweet must be a retweet. If false, it may not be a retweet. If it may be both, don't set it.\r\n\r\nIf there are more than 1 items in the array, they are optional. Only 1 of them has to match to let it pass.\r\nIf you leave the array empty, it will automatically pass if there is only one of the things that is searched for.\r\nExample:\r\n```PHP\r\n  'hashtags' => array(), // Empty array\r\n```\r\nIn this case it will pass if the tweet contains one or more hashtags, no matter what the text of it is. This also works with mentions.\r\n\r\n#### The method that's being triggered\r\nIn the example of actions.php, we see this:\r\n```PHP\r\n'do' => array('path' => ROOT_PATH . 'actions/TweetFound.php', 'class_name' => 'TweetFound', 'method_name' => 'twitterCommand'),\r\n'extra_params' => array('found_timestamp' => time()) \r\n```\r\nThis means the method TweetFound::twitterCommand will be triggered.\r\n\r\nThat will look like this:\r\n```PHP\r\n// actions/TweetFound.php\r\n\r\nclass TweetFound {\r\n\r\n\tpublic function twitterCommand($tweet, $extra_params) {\r\n\t\techo \"\\n Tweet found! -->\", $tweet->text; \r\n\t}\r\n\r\n}\r\n```\r\nYou can see that there are two parameters. The first one, $tweet, contains all the data of the tweet. The second, $extra_params, contains the extra parameters defined as extra_params. This can be useful for various things.\r\nWith your custom function you can also save the tweet.\r\n\r\n#### So, how do we run twitter-command?\r\nIt's very simple. Do this in the command line: \r\n```\r\n$ cd /path/to/twitter-command\r\n$ php -f run.php\r\n```\r\nThat's it!\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}